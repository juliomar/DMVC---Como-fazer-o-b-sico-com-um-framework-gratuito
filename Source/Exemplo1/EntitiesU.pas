// *************************************************************************** }
//
// Delphi MVC Framework
//
// Copyright (c) 2010-2020 Daniele Teti and the DMVCFramework Team
//
// https://github.com/danieleteti/delphimvcframework
//
// ***************************************************************************
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ***************************************************************************

unit EntitiesU;

interface

uses
  MVCFramework.Serializer.Commons,
  MVCFramework.ActiveRecord,
  System.Classes;

type

  [MVCNameCase(ncLowerCase)]
  [MVCTable('Album')]
  TAlbum = class(TMVCActiveRecord)
  private
    [MVCTableField('AlbumId', [foPrimaryKey, foAutoGenerated])]
    fAlbumid: Integer;
    [MVCTableField('Title')]
    fTitle: String;
    [MVCTableField('ArtistId')]
    fArtistid: Integer;
    [MVCTableField('Column1')]
    fColumn1: TStream;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('AlbumId')]
    property Albumid: Integer read fAlbumid write fAlbumid;
    [MVCNameAs('Title')]
    property Title: String read fTitle write fTitle;
    [MVCNameAs('ArtistId')]
    property Artistid: Integer read fArtistid write fArtistid;
    [MVCNameAs('Column1')]
    property Column1: TStream read fColumn1 write fColumn1;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('Artist')]
  TArtist = class(TMVCActiveRecord)
  private
    [MVCTableField('ArtistId', [foPrimaryKey, foAutoGenerated])]
    fArtistid: Integer;
    [MVCTableField('Name')]
    fName: String;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('ArtistId')]
    property Artistid: Integer read fArtistid write fArtistid;
    [MVCNameAs('Name')]
    property Name: String read fName write fName;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('Customer')]
  TCustomer = class(TMVCActiveRecord)
  private
    [MVCTableField('CustomerId', [foPrimaryKey, foAutoGenerated])]
    fCustomerid: Integer;
    [MVCTableField('FirstName')]
    fFirstname: String;
    [MVCTableField('LastName')]
    fLastname: String;
    [MVCTableField('Company')]
    fCompany: String;
    [MVCTableField('Address')]
    fAddress: String;
    [MVCTableField('City')]
    fCity: String;
    [MVCTableField('State')]
    fState: String;
    [MVCTableField('Country')]
    fCountry: String;
    [MVCTableField('PostalCode')]
    fPostalcode: String;
    [MVCTableField('Phone')]
    fPhone: String;
    [MVCTableField('Fax')]
    fFax: String;
    [MVCTableField('Email')]
    fEmail: String;
    [MVCTableField('SupportRepId')]
    fSupportrepid: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('CustomerId')]
    property Customerid: Integer read fCustomerid write fCustomerid;
    [MVCNameAs('FirstName')]
    property Firstname: String read fFirstname write fFirstname;
    [MVCNameAs('LastName')]
    property Lastname: String read fLastname write fLastname;
    [MVCNameAs('Company')]
    property Company: String read fCompany write fCompany;
    [MVCNameAs('Address')]
    property Address: String read fAddress write fAddress;
    [MVCNameAs('City')]
    property City: String read fCity write fCity;
    [MVCNameAs('State')]
    property State: String read fState write fState;
    [MVCNameAs('Country')]
    property Country: String read fCountry write fCountry;
    [MVCNameAs('PostalCode')]
    property Postalcode: String read fPostalcode write fPostalcode;
    [MVCNameAs('Phone')]
    property Phone: String read fPhone write fPhone;
    [MVCNameAs('Fax')]
    property Fax: String read fFax write fFax;
    [MVCNameAs('Email')]
    property Email: String read fEmail write fEmail;
    [MVCNameAs('SupportRepId')]
    property Supportrepid: Integer read fSupportrepid write fSupportrepid;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('Employee')]
  TEmployee = class(TMVCActiveRecord)
  private
    [MVCTableField('EmployeeId', [foPrimaryKey, foAutoGenerated])]
    fEmployeeid: Integer;
    [MVCTableField('LastName')]
    fLastname: String;
    [MVCTableField('FirstName')]
    fFirstname: String;
    [MVCTableField('Title')]
    fTitle: String;
    [MVCTableField('ReportsTo')]
    fReportsto: Integer;
    [MVCTableField('BirthDate')]
    fBirthdate: TDateTime;
    [MVCTableField('HireDate')]
    fHiredate: TDateTime;
    [MVCTableField('Address')]
    fAddress: String;
    [MVCTableField('City')]
    fCity: String;
    [MVCTableField('State')]
    fState: String;
    [MVCTableField('Country')]
    fCountry: String;
    [MVCTableField('PostalCode')]
    fPostalcode: String;
    [MVCTableField('Phone')]
    fPhone: String;
    [MVCTableField('Fax')]
    fFax: String;
    [MVCTableField('Email')]
    fEmail: String;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('EmployeeId')]
    property Employeeid: Integer read fEmployeeid write fEmployeeid;
    [MVCNameAs('LastName')]
    property Lastname: String read fLastname write fLastname;
    [MVCNameAs('FirstName')]
    property Firstname: String read fFirstname write fFirstname;
    [MVCNameAs('Title')]
    property Title: String read fTitle write fTitle;
    [MVCNameAs('ReportsTo')]
    property Reportsto: Integer read fReportsto write fReportsto;
    [MVCNameAs('BirthDate')]
    property Birthdate: TDateTime read fBirthdate write fBirthdate;
    [MVCNameAs('HireDate')]
    property Hiredate: TDateTime read fHiredate write fHiredate;
    [MVCNameAs('Address')]
    property Address: String read fAddress write fAddress;
    [MVCNameAs('City')]
    property City: String read fCity write fCity;
    [MVCNameAs('State')]
    property State: String read fState write fState;
    [MVCNameAs('Country')]
    property Country: String read fCountry write fCountry;
    [MVCNameAs('PostalCode')]
    property Postalcode: String read fPostalcode write fPostalcode;
    [MVCNameAs('Phone')]
    property Phone: String read fPhone write fPhone;
    [MVCNameAs('Fax')]
    property Fax: String read fFax write fFax;
    [MVCNameAs('Email')]
    property Email: String read fEmail write fEmail;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('EmpView')]
  TEmpview = class(TMVCActiveRecord)
  private
    [MVCTableField('EmployeeId')]
    fEmployeeid: Integer;
    [MVCTableField('LastName')]
    fLastname: String;
    [MVCTableField('FirstName')]
    fFirstname: String;
    [MVCTableField('Title')]
    fTitle: String;
    [MVCTableField('ReportsTo')]
    fReportsto: Integer;
    [MVCTableField('BirthDate')]
    fBirthdate: TDateTime;
    [MVCTableField('HireDate')]
    fHiredate: TDateTime;
    [MVCTableField('Address')]
    fAddress: String;
    [MVCTableField('City')]
    fCity: String;
    [MVCTableField('State')]
    fState: String;
    [MVCTableField('Country')]
    fCountry: String;
    [MVCTableField('PostalCode')]
    fPostalcode: String;
    [MVCTableField('Phone')]
    fPhone: String;
    [MVCTableField('Fax')]
    fFax: String;
    [MVCTableField('Email')]
    fEmail: String;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('EmployeeId')]
    property Employeeid: Integer read fEmployeeid write fEmployeeid;
    [MVCNameAs('LastName')]
    property Lastname: String read fLastname write fLastname;
    [MVCNameAs('FirstName')]
    property Firstname: String read fFirstname write fFirstname;
    [MVCNameAs('Title')]
    property Title: String read fTitle write fTitle;
    [MVCNameAs('ReportsTo')]
    property Reportsto: Integer read fReportsto write fReportsto;
    [MVCNameAs('BirthDate')]
    property Birthdate: TDateTime read fBirthdate write fBirthdate;
    [MVCNameAs('HireDate')]
    property Hiredate: TDateTime read fHiredate write fHiredate;
    [MVCNameAs('Address')]
    property Address: String read fAddress write fAddress;
    [MVCNameAs('City')]
    property City: String read fCity write fCity;
    [MVCNameAs('State')]
    property State: String read fState write fState;
    [MVCNameAs('Country')]
    property Country: String read fCountry write fCountry;
    [MVCNameAs('PostalCode')]
    property Postalcode: String read fPostalcode write fPostalcode;
    [MVCNameAs('Phone')]
    property Phone: String read fPhone write fPhone;
    [MVCNameAs('Fax')]
    property Fax: String read fFax write fFax;
    [MVCNameAs('Email')]
    property Email: String read fEmail write fEmail;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('foo')]
  TFoo = class(TMVCActiveRecord)
  private
    [MVCTableField('bar')]
    fBar: Integer;
    [MVCTableField('baz')]
    fBaz: String;
  public
    constructor Create; override;
    destructor Destroy; override;
    property Bar: Integer read fBar write fBar;
    property Baz: String read fBaz write fBaz;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('Genre')]
  TGenre = class(TMVCActiveRecord)
  private
    [MVCTableField('GenreId', [foPrimaryKey, foAutoGenerated])]
    fGenreid: Integer;
    [MVCTableField('Name')]
    fName: String;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('GenreId')]
    property Genreid: Integer read fGenreid write fGenreid;
    [MVCNameAs('Name')]
    property Name: String read fName write fName;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('Invoice')]
  TInvoice = class(TMVCActiveRecord)
  private
    [MVCTableField('InvoiceId', [foPrimaryKey, foAutoGenerated])]
    fInvoiceid: Integer;
    [MVCTableField('CustomerId')]
    fCustomerid: Integer;
    [MVCTableField('InvoiceDate')]
    fInvoicedate: TDateTime;
    [MVCTableField('BillingAddress')]
    fBillingaddress: String;
    [MVCTableField('BillingCity')]
    fBillingcity: String;
    [MVCTableField('BillingState')]
    fBillingstate: String;
    [MVCTableField('BillingCountry')]
    fBillingcountry: String;
    [MVCTableField('BillingPostalCode')]
    fBillingpostalcode: String;
    [MVCTableField('Total')]
    fTotal: Currency;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('InvoiceId')]
    property Invoiceid: Integer read fInvoiceid write fInvoiceid;
    [MVCNameAs('CustomerId')]
    property Customerid: Integer read fCustomerid write fCustomerid;
    [MVCNameAs('InvoiceDate')]
    property Invoicedate: TDateTime read fInvoicedate write fInvoicedate;
    [MVCNameAs('BillingAddress')]
    property Billingaddress: String read fBillingaddress write fBillingaddress;
    [MVCNameAs('BillingCity')]
    property Billingcity: String read fBillingcity write fBillingcity;
    [MVCNameAs('BillingState')]
    property Billingstate: String read fBillingstate write fBillingstate;
    [MVCNameAs('BillingCountry')]
    property Billingcountry: String read fBillingcountry write fBillingcountry;
    [MVCNameAs('BillingPostalCode')]
    property Billingpostalcode: String read fBillingpostalcode write fBillingpostalcode;
    [MVCNameAs('Total')]
    property Total: Currency read fTotal write fTotal;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('InvoiceLine')]
  TInvoiceline = class(TMVCActiveRecord)
  private
    [MVCTableField('InvoiceLineId', [foPrimaryKey, foAutoGenerated])]
    fInvoicelineid: Integer;
    [MVCTableField('InvoiceId')]
    fInvoiceid: Integer;
    [MVCTableField('TrackId')]
    fTrackid: Integer;
    [MVCTableField('UnitPrice')]
    fUnitprice: Currency;
    [MVCTableField('Quantity')]
    fQuantity: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('InvoiceLineId')]
    property Invoicelineid: Integer read fInvoicelineid write fInvoicelineid;
    [MVCNameAs('InvoiceId')]
    property Invoiceid: Integer read fInvoiceid write fInvoiceid;
    [MVCNameAs('TrackId')]
    property Trackid: Integer read fTrackid write fTrackid;
    [MVCNameAs('UnitPrice')]
    property Unitprice: Currency read fUnitprice write fUnitprice;
    [MVCNameAs('Quantity')]
    property Quantity: Integer read fQuantity write fQuantity;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('MediaType')]
  TMediatype = class(TMVCActiveRecord)
  private
    [MVCTableField('MediaTypeId', [foPrimaryKey, foAutoGenerated])]
    fMediatypeid: Integer;
    [MVCTableField('Name')]
    fName: String;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('MediaTypeId')]
    property Mediatypeid: Integer read fMediatypeid write fMediatypeid;
    [MVCNameAs('Name')]
    property Name: String read fName write fName;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('Playlist')]
  TPlaylist = class(TMVCActiveRecord)
  private
    [MVCTableField('PlaylistId', [foPrimaryKey, foAutoGenerated])]
    fPlaylistid: Integer;
    [MVCTableField('Name')]
    fName: String;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('PlaylistId')]
    property Playlistid: Integer read fPlaylistid write fPlaylistid;
    [MVCNameAs('Name')]
    property Name: String read fName write fName;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('PlaylistTrack')]
  TPlaylisttrack = class(TMVCActiveRecord)
  private
    [MVCTableField('PlaylistId', [foPrimaryKey, foAutoGenerated])]
    fPlaylistid: Integer;
    [MVCTableField('TrackId', [foPrimaryKey, foAutoGenerated])]
    fTrackid: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('PlaylistId')]
    property Playlistid: Integer read fPlaylistid write fPlaylistid;
    [MVCNameAs('TrackId')]
    property Trackid: Integer read fTrackid write fTrackid;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('test')]
  TTest = class(TMVCActiveRecord)
  private
    [MVCTableField('ct')]
    fCT: String;
  public
    constructor Create; override;
    destructor Destroy; override;
    property CT: String read fCT write fCT;
  end;

  [MVCNameCase(ncLowerCase)]
  [MVCTable('Track')]
  TTrack = class(TMVCActiveRecord)
  private
    [MVCTableField('TrackId', [foPrimaryKey, foAutoGenerated])]
    fTrackid: Integer;
    [MVCTableField('Name')]
    fName: String;
    [MVCTableField('AlbumId')]
    fAlbumid: Integer;
    [MVCTableField('MediaTypeId')]
    fMediatypeid: Integer;
    [MVCTableField('GenreId')]
    fGenreid: Integer;
    [MVCTableField('Composer')]
    fComposer: String;
    [MVCTableField('Milliseconds')]
    fMilliseconds: Integer;
    [MVCTableField('Bytes')]
    fBytes: Integer;
    [MVCTableField('UnitPrice')]
    fUnitprice: Currency;
  public
    constructor Create; override;
    destructor Destroy; override;
    [MVCNameAs('TrackId')]
    property Trackid: Integer read fTrackid write fTrackid;
    [MVCNameAs('Name')]
    property Name: String read fName write fName;
    [MVCNameAs('AlbumId')]
    property Albumid: Integer read fAlbumid write fAlbumid;
    [MVCNameAs('MediaTypeId')]
    property Mediatypeid: Integer read fMediatypeid write fMediatypeid;
    [MVCNameAs('GenreId')]
    property Genreid: Integer read fGenreid write fGenreid;
    [MVCNameAs('Composer')]
    property Composer: String read fComposer write fComposer;
    [MVCNameAs('Milliseconds')]
    property Milliseconds: Integer read fMilliseconds write fMilliseconds;
    [MVCNameAs('Bytes')]
    property Bytes: Integer read fBytes write fBytes;
    [MVCNameAs('UnitPrice')]
    property Unitprice: Currency read fUnitprice write fUnitprice;
  end;

implementation

constructor TAlbum.Create;
begin
  inherited Create;
  fColumn1 := TMemoryStream.Create;
end;

destructor TAlbum.Destroy;
begin
  fColumn1.Free;
  inherited;
end;

constructor TArtist.Create;
begin
  inherited Create;
end;

destructor TArtist.Destroy;
begin
  inherited;
end;

constructor TCustomer.Create;
begin
  inherited Create;
end;

destructor TCustomer.Destroy;
begin
  inherited;
end;

constructor TEmployee.Create;
begin
  inherited Create;
end;

destructor TEmployee.Destroy;
begin
  inherited;
end;

constructor TEmpview.Create;
begin
  inherited Create;
end;

destructor TEmpview.Destroy;
begin
  inherited;
end;

constructor TFoo.Create;
begin
  inherited Create;
end;

destructor TFoo.Destroy;
begin
  inherited;
end;

constructor TGenre.Create;
begin
  inherited Create;
end;

destructor TGenre.Destroy;
begin
  inherited;
end;

constructor TInvoice.Create;
begin
  inherited Create;
end;

destructor TInvoice.Destroy;
begin
  inherited;
end;

constructor TInvoiceline.Create;
begin
  inherited Create;
end;

destructor TInvoiceline.Destroy;
begin
  inherited;
end;

constructor TMediatype.Create;
begin
  inherited Create;
end;

destructor TMediatype.Destroy;
begin
  inherited;
end;

constructor TPlaylist.Create;
begin
  inherited Create;
end;

destructor TPlaylist.Destroy;
begin
  inherited;
end;

constructor TPlaylisttrack.Create;
begin
  inherited Create;
end;

destructor TPlaylisttrack.Destroy;
begin
  inherited;
end;

constructor TTest.Create;
begin
  inherited Create;
end;

destructor TTest.Destroy;
begin
  inherited;
end;

constructor TTrack.Create;
begin
  inherited Create;
end;

destructor TTrack.Destroy;
begin
  inherited;
end;

initialization

  ActiveRecordMappingRegistry.AddEntity('album',TAlbum);
  ActiveRecordMappingRegistry.AddEntity('artist',TArtist);
  ActiveRecordMappingRegistry.AddEntity('customer',TCustomer);
  ActiveRecordMappingRegistry.AddEntity('employee',TEmployee);
  ActiveRecordMappingRegistry.AddEntity('empview',TEmpview);
  ActiveRecordMappingRegistry.AddEntity('foo',TFoo);
  ActiveRecordMappingRegistry.AddEntity('genre',TGenre);
  ActiveRecordMappingRegistry.AddEntity('invoice',TInvoice);
  ActiveRecordMappingRegistry.AddEntity('invoiceline',TInvoiceline);
  ActiveRecordMappingRegistry.AddEntity('mediatype',TMediatype);
  ActiveRecordMappingRegistry.AddEntity('playlist',TPlaylist);
  ActiveRecordMappingRegistry.AddEntity('playlisttrack',TPlaylisttrack);
  ActiveRecordMappingRegistry.AddEntity('test',TTest);
  ActiveRecordMappingRegistry.AddEntity('track',TTrack);

end.